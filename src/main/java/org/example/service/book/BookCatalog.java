package org.example.service.book;

import org.example.model.Book;

import java.io.*;
import java.util.*;

public class BookCatalog implements Comparator<Book> {
    private List<Book> books;
    private Map<String, Book> titleMap;
    private Map<String, List<Book>> authorMap;

    private static final String TEXT_FILE = "books.txt";
    private static final String BINARY_FILE = "books.dat";

    public BookCatalog() {
        books = new ArrayList<>();
        titleMap = new HashMap<>();
        authorMap = new HashMap<>();
    }

    /**
     * Be√°ll√≠tja (vagy fel√ºl√≠rja) az in-memory k√∂nyvlist√°t a megadott list√°val.
     */
    public void setBooks(List<Book> newBooks) {
        books.clear();
        titleMap.clear();
        authorMap.clear();
        for (Book book : newBooks) {
            addBook(book);
        }
    }

    /**
     * Hozz√°ad egy k√∂nyvet a k√∂nyv katal√≥gushoz.
     * A k√∂nyvet a c√≠m alapj√°n is elmenti a c√≠m-t√©rk√©pen (titleMap),
     * √©s az √∂sszes szerz≈ët a szerz≈ë-t√©rk√©pen (authorMap) is r√∂gz√≠ti.
     *
     * @param book A hozz√°adand√≥ k√∂nyv.
     */
    public void addBook(Book book) {
        if (titleMap.containsKey(book.getTitle())) {
            System.out.println("A k√∂nyv m√°r l√©tezik a katal√≥gusban.");
            return;
        }

        books.add(book);
        titleMap.put(book.getTitle(), book);

        for (String author : book.getAuthors()) {
            authorMap.computeIfAbsent(author, k -> new ArrayList<>()).add(book);
        }
    }

    /**
     * T√∂r√∂l egy k√∂nyvet a katal√≥gusb√≥l azonos√≠t√≥ja alapj√°n.
     * Ha a k√∂nyv l√©tezik, elt√°vol√≠tja a k√∂nyvet a k√∂nyvlist√°b√≥l, a c√≠m-t√©rk√©pr≈ël √©s
     * a szerz≈ët√©rk√©pr≈ël is.
     *
     * @param id A t√∂rlend≈ë k√∂nyv azonos√≠t√≥ja.
     */
    public void deleteBook(String id) {
        Book bookToRemove = books.stream().filter(b -> Objects.equals(b.getId(), id)).findFirst().orElse(null);
        if (bookToRemove != null) {
            books.remove(bookToRemove);
            titleMap.remove(bookToRemove.getTitle());
            for (String author : bookToRemove.getAuthors()) {
                List<Book> list = authorMap.get(author);
                if (list != null) {
                    list.remove(bookToRemove);
                    if (list.isEmpty()) {
                        authorMap.remove(author);
                    }
                }
            }
        }
    }

    /**
     * Visszaadja az √∂sszes k√∂nyvet a katal√≥gusb√≥l.
     *
     * @return A k√∂nyvek list√°ja.
     */
    public List<Book> listBooks() {
        return new ArrayList<>(books);
    }

    /**
     * Keres egy k√∂nyvet a c√≠m alapj√°n.
     * Ha a c√≠m nem tal√°lhat√≥, null √©rt√©ket ad vissza.
     *
     * @param title A keresett k√∂nyv c√≠me.
     * @return A megtal√°lt k√∂nyv, ha van; null, ha nem tal√°lhat√≥.
     */
    public Book searchByTitle(String title) {
        return titleMap.get(title);
    }

    /**
     * Keres k√∂nyveket egy szerz≈ë alapj√°n.
     * Ha a szerz≈ë nem tal√°lhat√≥, √ºres list√°t ad vissza.
     *
     * @param author A keresett szerz≈ë neve.
     * @return A k√∂nyvek list√°ja, amelyek a megadott szerz≈ëh√∂z tartoznak.
     */
    public List<Book> searchByAuthor(String author) {
        return authorMap.getOrDefault(author, Collections.emptyList());
    }

    /**
     * Rendezni az √∂sszes k√∂nyvet a szerz≈ëk neve szerint.
     */
    public void sortByAuthor() {
        books.sort(Comparator.comparing(b -> b.getAuthors().iterator().next()));
    }

    /**
     * Rendezni az √∂sszes k√∂nyvet az √°rak alapj√°n.
     */
    public void sortByPrice() {
        books.sort(Comparator.comparing(Book::getPrice));
    }

    /**
     * Rendezni az √∂sszes k√∂nyvet a kiad√°si √©v√ºk szerint.
     */
    public void sortByPublicationYear() {
        books.sort(Comparator.comparing(Book::getPublicationYear));
    }

    /**
     * Comparator<Book> implement√°ci√≥ ‚Äì alap√©rtelmezett rendez√©s a c√≠m alapj√°n.
     */
    @Override
    public int compare(Book b1, Book b2) {
        return b1.getTitle().compareTo(b2.getTitle());
    }

    /**
     * üìå K√∂nyvek ment√©se sz√∂veges f√°jlba.
     */
    public void saveToTextFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(TEXT_FILE))) {
            for (Book book : books) {
                writer.write(book.getId() + ";" + book.getTitle() + ";" +
                        String.join(",", book.getAuthors()) + ";" +
                        book.getPublicationYear() + ";" + book.getPrice());
                writer.newLine();
            }
            System.out.println("‚úÖ K√∂nyvek sikeresen mentve a " + TEXT_FILE + " f√°jlba.");
        } catch (IOException e) {
            System.err.println("‚ùå Hiba a f√°jl ment√©se k√∂zben: " + e.getMessage());
        }
    }

    /**
     * üìå K√∂nyvek bet√∂lt√©se sz√∂veges f√°jlb√≥l.
     */
    public void loadFromTextFile() {
        books.clear();
        titleMap.clear();
        authorMap.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader(TEXT_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";");
                if (parts.length != 5) continue;

                int id = Integer.parseInt(parts[0]);
                String title = parts[1];
                Set<String> authors = new HashSet<>(Arrays.asList(parts[2].split(",")));
                int publicationYear = Integer.parseInt(parts[3]);
                double price = Double.parseDouble(parts[4]);

                if (titleMap.containsKey(title)) {
                    continue;
                }

                addBook(new Book(title, authors, publicationYear, price));
            }
            System.out.println("‚úÖ K√∂nyvek sikeresen bet√∂ltve a " + TEXT_FILE + " f√°jlb√≥l.");
        } catch (IOException e) {
            System.err.println("‚ùå Hiba a f√°jl bet√∂lt√©se k√∂zben: " + e.getMessage());
        }
    }

    /**
     * üìå K√∂nyvek ment√©se bin√°ris f√°jlba.
     */
    public void saveToBinaryFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(BINARY_FILE))) {
            oos.writeObject(books);
            System.out.println("‚úÖ K√∂nyvek sikeresen mentve a " + BINARY_FILE + " f√°jlba.");
        } catch (IOException e) {
            System.err.println("‚ùå Hiba a bin√°ris f√°jl ment√©se k√∂zben: " + e.getMessage());
        }
    }

    /**
     * üìå K√∂nyvek bet√∂lt√©se bin√°ris f√°jlb√≥l.
     */
    @SuppressWarnings("unchecked")
    public void loadFromBinaryFile() {
        books.clear();
        titleMap.clear();
        authorMap.clear();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(BINARY_FILE))) {
            books = (List<Book>) ois.readObject();

            for (Book book : books) {
                titleMap.put(book.getTitle(), book);
                for (String author : book.getAuthors()) {
                    authorMap.computeIfAbsent(author, k -> new ArrayList<>()).add(book);
                }
            }
            System.out.println("‚úÖ K√∂nyvek sikeresen bet√∂ltve a " + BINARY_FILE + " f√°jlb√≥l.");
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("‚ùå Hiba a bin√°ris f√°jl bet√∂lt√©se k√∂zben: " + e.getMessage());
        }
    }
}
